[
  {
    "id": "ggasqwtqwtqw1",
    "collection": ["Common Snippets"],
    "title": "Add custom scrollbar in css",
    "addedBy": "kate",
    "filename": "style.css",
    "active": true,
    "tags": [
      "css"
    ],
    "likedBy": [
      "chris", "kate", "kevin", "noah"
    ],
    "description": "without js",
    "language": "css",
    "private": false,
    "addedOn": "2012-04-23T18:25:43.511Z",
    "updatedOn": "2012-04-23T18:25:43.511Z",
    "source": "https://stackoverflow.com",
    "value": "\n@import url('https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap');\n\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    outline: none;\n    -ms-overflow-style: none;\n    scrollbar-width: none;\n  }\n  *::-webkit-scrollbar {\n    display: none;\n  }\n\n  body {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n"
  },
  {
    "id": "g2gaqwtqwtqws",
    "collection": ["API Calls"],
    "title": "Python TreeNode class",
    "filename": "main.py",
    "active": true,
    "tags": [
      "python", "nodes", "data"
    ],
    "language": "python",
    "addedBy": "kate",
    "likedBy": [
      "chris", "kate", "kevin", "noah"
    ],
    "private": false,
    "addedOn": "2012-08-23T18:25:43.511Z",
    "updatedOn": "2012-08-23T18:25:43.511Z",
    "source": "https://stackoverflow.com",
    "description": "A TreeNode is a data structure that represents one entry of a tree, which is composed of multiple of such nodes. The topmost node of a tree is called the “root”, and each node (with the exception of the root node) is associated with one parent node. Likewise, each node can have an arbitrary number of child nodes. An implementation of a TreeNode class in Python should have functions to add nodes, remove nodes, and traverse nodes within the tree.",
    "value":"class TreeNode:\r\n def __init__(self, value):\r\n self.value = value # data\r\n self.children = [] # references to other nodes\r\n\r\n def add_child(self, child_node):\r\n # creates parent-child relationship\r\n print(\"Adding \" + child_node.value)\r\n self.children.append(child_node)\r\n\r\n def remove_child(self, child_node):\r\n # removes parent-child relationship\r\n print(\"Removing \" + child_node.value + \" from \" + self.value)\r\n self.children = [child for child in self.children\r\n if child is not child_node]\r\n\r\n def traverse(self):\r\n # moves through each node referenced from self downwards\r\n nodes_to_visit = [self]\r\n while len(nodes_to_visit) > 0:\r\n current_node = nodes_to_visit.pop()\r\n print(current_node.value)\r\n nodes_to_visit += current_node.children",
  },
  {
    "id": "gasqwtqwtqwtg3",
    "collection": ["Data Transformations"],
    "title": "hash map only one value",
    "filename": "app.py",
    "active": true,
    "tags": [
      "js", "react", "css", "html"
    ],
    "addedBy": "noah",
    "likedBy": [
      "chris", "kate", "kevin", "noah"
    ],
    "private": false,
    "addedOn": "2012-06-23T18:25:43.511Z",
    "updatedOn": "2012-06-23T18:25:43.511Z",
    "source": "https://stackoverflow.com",
    "description": "Each Hash Map key can be paired with only one value. However, different keys can be paired with the same value.",
    "language": "python",
    "value": "#This is a valid Hash Map where 2 keys share the same value\n    correct_hash_map = {\n      \\\"a\\\" : 1,\n      \\\"b\\\" : 3,\n      \\\"c\\\" : 1\n    }\n    \n    #This Hash Map is INVALID since a key cannot have more than 1 value\n    incorrect_hash_map = {\n      \\\"a\\\" : 1,\n      \\\"a\\\" : 3,\n      \\\"b\\\" : 2\n    }"
  },
  {
    "id": "ggaqwtqwtqs4",
    "collection": ["How To"],
    "title": "Use another component",
    "filename": "test.js",
    "active": true,
    "tags": [
      "js",
    ],
    "addedBy": "chris",
    "likedBy": [
      "chris", "kate", "kevin", "noah"
    ],
    "private": false,
    "addedOn": "2016-04-23T18:25:43.511Z",
    "updatedOn": "2016-04-23T18:25:43.511Z",
    "source": "https://stackoverflow.com",
    "description": "How to wrap a button JS",
    "language": "javascript",
    "value": "function App() {\n  return (\n    <Button as=\\\"a\\\" href=\\\"https://smooth-doc.com\\\">\n      Smooth DOC\n    </Button>\n  )"
  },
  {
    "id": "ggastqqtwtq5",
    "category": ["Data Structures"],
    "title": "Python Node Implementation",
    "filename": "nody.py",
    "active": true,
    "tags": [
      "python", "class"
    ],
    "addedBy": "noah",
    "likedBy": [
      "chris", "kate", "kevin", "noah"
    ],
    "private": false,
    "addedOn": "2011-04-23T18:25:43.511Z",
    "updatedOn": "2011-04-23T18:25:43.511Z",
    "source": "https://stackoverflow.com",
    "description": "Define a linked-list in Python",
    "language": "Python",
    "value": "class Node:\n  def __init__(self, value, next_node=None):\n    self.value = value\n    self.next_node = next_node\n\n  def set_next_node(self, next_node):\n    self.next_node = next_node\n\n  def get_next_node(self):\n    return self.next_node\n\n  def get_value(self):\n    return self.value"
  },
  {
    "id": "ggaqtwqtws6",
    "category": ["Command Line"],
    "title": "Bash script comparison operators",
    "filename": "test.txt",
    "active": true,
    "tags": [
      "bash", "scripts"
    ],
    "addedBy": "elias",
    "likedBy": [
      "chris", "kate", "kevin", "noah"
    ],
    "private": false,
    "addedOn": "2013-04-23T18:25:43.511Z",
    "updatedOn": "2013-04-23T18:25:43.511Z",
    "source": "https://stackoverflow.com",
    "description": "The shell command touch creates a new file in the current working directory with the name provided",
    "language": "bash",
    "value": "#!bin/bash\nword1=\\\"Hello\\\"\nword2=\\\"Hello\\\"\nword3=\\\"hello\\\"\n\nif [ $word1 == $word2 ]\nthen\n  echo \\\"Strings are equal\\\"\nfi\n\nif [ $word1 != $word3 ]\nthen\n  echo \\\"Strings are not equal\\\"\nfi"
  },
  {
    "id": "gagtqqtwqtw7",
    "category": ["Flask"],
    "title": "Creating a Route in Flask",
    "filename": "app.py",
    "active": true,
    "tags": [
      "pytjon", "flask"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "kevin", "noah"
    ],
    "private": false,
    "addedOn": "17 AUG 2019",
    "updatedOn": "16 AUG 2019",
    "source": "https://stackoverflow.com",
    "language": "python",
    "description": "Routes in a Flask app can be created by defining a view function and associating a URL with it using the route() decorator. Routes specify how the Flask app handles requests it receives, such as what to display on the webpage at a certain URL.",
    "value": "# Import Flask class\nfrom flask import Flask\n\n\n# Create Flask object\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\n\n# Output: The text \\`Hello, World!\\` is displayed at the URL path '/'"
  },
  {
    "id": "gastwewtetg8",
    "category": ["API Calls"],
    "title": "JSX element event listeners",
    "filename": "test.jsx",
    "active": true,
    "tags": [
      "react", "jsx"
    ],
    "addedBy": "elias",
    "likedBy": [
      "chris", "kate", "kevin", "noah"
    ],
    "private": false,
    "addedOn": "17 AUG 2019",
    "updatedOn": "16 AUG 2019",
    "source": "https://stackoverflow.com",
    "language": "jsx",
    "description": "In JSX, event listeners are specified as attributes on elements. An event listener attribute’s name should be written in camelCase, such as onClick for an onclick event, and onMouseOver for an onmouseover event.",
    "value": "// Basic example\nconst handleClick = () => alert(\\\"Hello world!\\\");\n\nconst button = <button onClick={handleClick}>Click here</button>;\n\n// Example with event parameter\nconst handleMouseOver = (event) => event.target.style.color = 'purple';\n\nconst button2 = <div onMouseOver={handleMouseOver}>Drag here to change color</div>;"
  },
  {
    "id": "gagstwtwetwe9",
    "collection": ["TypeScript Event Handlers"],
    "title": "Text Input",
    "filename": "test.tsx",
    "active": true,
    "tags": [
      "typescript", "tsx"
    ],
    "addedBy": "elias",
    "likedBy": [
      "chris", "kate", "kevin", "noah"
    ],
    "private": false,
    "addedOn": "2014-04-23T18:25:43.511Z",
    "updatedOn": "2014-04-23T18:25:43.511Z",
    "source": "https://stackoverflow.com",
    "language": "tsx",
    "description": "For <input type=\"text\"> the event type is React.ChangeEvent<HTMLInputElement>",
    "value": "const Input = (): JSX.Element => {\n  const [inputValue, setInputValue] = useState<string>(\"\");\n  return (\n      <input\n          type=\"text\"\n          value={inputValue}\n          onChange={(\n              ev: React.ChangeEvent<HTMLInputElement>,\n          ): void => setInputValue(ev.target.value)}\n      />\n  );\n};"
  },
  {
    "id": "gsawtewteg9",
    "collection": ["TypeScript Event Handlers"],
    "title": "Slider Input",
    "filename": "test.tsx",
    "active": true,
    "tags": [
      "typescript", "tsx"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "kevin", "noah"
    ],
    "private": false,
    "addedOn": "2012-04-23T18:25:43.511Z",
    "updatedOn": "2012-04-23T18:25:43.511Z",
    "source": "https://stackoverflow.com",
    "language": "tsx",
    "description": "The HTML5 slider is an <input type=\"range\"> , sharing the same event as the <input type=\"text\"> , React.ChangeEvent<HTMLInputElement>\nAs it’s counterpart, the value of ev.target.value will be a string, but the majority of cases we will want to use it to get a number. For that, notice how we’re using a parseInt to cast the string to a number .\n",
    "value": "const Slider = (): JSX.Element => {\n  const [sliderValue, setSliderValue] = useState<number>(0);\n  return (\n      <input\n          type=\"range\"\n          min={0}\n          max={100}\n          value={sliderValue}\n          onChange={(\n              ev: React.ChangeEvent<HTMLInputElement>,\n          ): void => {\n              setSliderValue(\n                  parseInt(ev.target.value, 10),\n              );\n          }}\n      />\n  );\n};"
  },
  {
    "id": "gaewttwgs9",
    "collection": ["TypeScript Event Handlers"],
    "title": "Select Input",
    "filename": "test.tsx",
    "active": true,
    "tags": [
      "typescript", "tsx"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "kevin", "noah"
    ],
    "private": false,
    "addedOn": "2020-04-23T18:25:43.511Z",
    "updatedOn": "2020-04-23T18:25:43.511Z",
    "source": "https://stackoverflow.com",
    "language": "tsx",
    "description": "For <select>we use React.ChangeEvent<HTMLInputSelect>\n",
    "value": "const Select = (): JSX.Element => {\n  const [selectValue, setSelectValue] = useState<string>(\n      \"optionA\",\n  );\n  return (\n      <select\n          value={selectValue}\n          onBlur={(\n              ev: React.ChangeEvent<HTMLSelectElement>,\n          ): void => setSelectValue(ev.target.value)}\n      >\n          <option value=\"optionA\">Option A</option>\n          <option value=\"optionB\">Option B</option>\n          <option value=\"optionC\">Option C</option>\n      </select>\n  );\n};"
  },
  {
    "id": "gasgwetwt9",
    "collection": ["TypeScript Event Handlers"],
    "title": "Misc. variety",
    "filename": "test.tsx",
    "active": true,
    "tags": [
      "typescript", "tsx"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "kevin", "noah"
    ],
    "private": false,
    "addedOn": "2020-04-23T18:25:43.511Z",
    "updatedOn": "2020-04-23T18:25:43.511Z",
    "source": "https://stackoverflow.com",
    "language": "tsx",
    "description": "Misc",
    "value": "// functions that doesnt take args anddoesn't return value\ninterface MyClassProps {\n  someProp: string;\n  onChange(): any;\n}\nclass MyClass extends React.Component<MyClassProps, MyClassState> ...\n\n// accepts args and returs value\ninterface MyClassProps {\n  anotherProp: number;\n  onChange(name: string): any;\n}\n\n// function thats optional\ninterface MyClassProps {\n  onChange?(name: string): number;\n  niceProp: boolean;\n}\n\n// using type keyword\ntype MyFunctionType = (name: string) => number;\ninterface MyClassProps {\n    onChange: MyFunctionType;\n    niceProp: string;\n}"
  },
  {
    "id": "tour01",
    "collection": ["Opinionated Standards", "TypeScript Event Handlers"],
    "title": "Misc. variety",
    "filename": "test.tsx",
    "active": true,
    "tags": [
      "typescript", "tsx"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://stackoverflow.com",
    "language": "tsx",
    "description": "Not using React.FC",
    "value": "import * as React from \"react\";\n\ninterface AppContextInterface {\n  name: string;\n  author: string;\n  url: string;\n}\n\nconst AppCtx = React.createContext<AppContextInterface | null>(null);\n\n// Provider in your app\n\nconst sampleAppContext: AppContextInterface = {\n  name: \"Using React Context in a Typescript App\",\n  author: \"thehappybug\",\n  url: \"http://www.example.com\",\n};\n\nexport const App = () => (\n  <AppCtx.Provider value={sampleAppContext}>...</AppCtx.Provider>\n);\n\n// Consume in your app\n\nexport const PostInfo = () => {\n  const appContext = React.useContext(AppCtx);\n  return (\n    <div>\n      Name: {appContext.name}, Author: {appContext.author}, Url:{\" \"}\n      {appContext.url}\n    </div>\n  );\n};\n"
  },
  {
    "id": "tour0rawr1",
    "collection": ["Language Intros"],
    "title": "Kotlin",
    "filename": "test.kt",
    "active": true,
    "tags": [
      "kotlin", "array"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://stackoverflow.com",
    "language": "kotlin",
    "description": "Convert an array list to an array.",
    "value": "fun main(args: Array<String>) {\n\n    // an arraylist of vowels\n    val vowels_list: List<String> = listOf(\"a\", \"e\", \"i\", \"o\", \"u\")\n    \n    // converting arraylist to array\n    val vowels_array: Array<String> = vowels_list.toTypedArray()\n    \n    // printing elements of the array \n    vowels_array.forEach { System.out.print(it) }\n}"
  },
  {
    "id": "tour0rawr1",
    "collection": ["Language Intros"],
    "title": "Dart",
    "filename": "test.kt",
    "active": true,
    "tags": [
      "dart", "class"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://dart.dev/samples",
    "language": "dart",
    "description": "Here’s an example of a class with three properties, two constructors, and a method. One of the properties can’t be set directly, so it’s defined using a getter method (instead of a variable).",
    "value": "class Spacecraft {\n  String name;\n  DateTime? launchDate;\n\n  // Constructor, with syntactic sugar for assignment to members.\n  Spacecraft(this.name, this.launchDate) {\n    // Initialization code goes here.\n  }\n\n  // Named constructor that forwards to the default one.\n  Spacecraft.unlaunched(String name) : this(name, null);\n\n  int? get launchYear => launchDate?.year; // read-only non-final property\n\n  // Method.\n  void describe() {\n    print('Spacecraft: $name');\n    var launchDate = this.launchDate; // Type promotion doesn't work on getters.\n    if (launchDate != null) {\n      int years = DateTime.now().difference(launchDate).inDays ~/ 365;\n      print('Launched: $launchYear ($years years ago)');\n    } else {\n      print('Unlaunched');\n    }\n  }\n}"
  },
  {
    "id": "tour0rawr1",
    "collection": ["Language Intros"],
    "title": "Perl",
    "filename": "test.pl",
    "active": true,
    "tags": [
      "perl", "while", "until"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://www.perl.com/pub/2008/05/07/beginners-introduction-to-perl-510-part-2.html/",
    "language": "perl",
    "description": "Two slightly more complex keywords are while and until. They both take a condition and a block of code, just like if and unless, but they act like loops similar to for. Perl tests the condition, runs the block of code and runs it over and over again for as long as the condition is true (for a while loop) or false (for a until loop).",
    "value": "use 5.010;\n\nmy $count = 0;\n\nwhile ($count != 3) {\n   $count++;\n   say \"Counting up to $count...\";\n}\n\nuntil ($count == 0) {\n   $count--;\n   say \"Counting down to $count...\";\n}"
  },
  {
    "id": "tour0rawr1",
    "collection": ["Language Intros"],
    "title": "Java",
    "filename": "CallingMethodsInSameClass.java",
    "active": true,
    "tags": [
      "java", "class", "methods"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://www.perl.com/pub/2008/05/07/beginners-introduction-to-perl-510-part-2.html/",
    "language": "java",
    "description": "Illustrates how to call static methods of a class from a method in the same class",
    "value": "public class CallingMethodsInSameClass\n{\n\tpublic static void main(String[] args) {\n\t\tprintOne();\n\t\tprintOne();\n\t\tprintTwo();\n\t}\n\n\tpublic static void printOne() {\n\t\tSystem.out.println(\"Hello World\");\n\t}\n\n\tpublic static void printTwo() {\n\t\tprintOne();\n\t\tprintOne();\n\t}\n}"
  },
  {
    "id": "tour0rawr1",
    "collection": ["Language Intros"],
    "title": "Julia",
    "filename": "test.julia",
    "active": true,
    "tags": [
      "java", "class", "methods"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://julialang.org/learning/code-examples/",
    "language": "julia",
    "description": "Sample for loop in Julia",
    "value": "function mandelbrot(a)\n    z = 0\n    for i=1:50\n        z = z^2 + a\n    end\n    return z\nend\n\nfor y=1.0:-0.05:-1.0\n    for x=-2.0:0.0315:0.5\n        abs(mandelbrot(complex(x, y))) < 2 ? print(\"*\") : print(\" \")\n    end\n    println()\nend"
  },
  {
    "id": "tour0r34737awr1",
    "collection": ["Language Intros"],
    "title": "Clojure",
    "filename": "test.clj",
    "active": true,
    "tags": [
      "clojure", "function"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "http://kimh.github.io/clojure-by-example/#def",
    "language": "clojure",
    "description": "To define a function, use defn.\n\nThe first argument is the name of function say-hello, the second argument is the argument of the function [name], and the third argument is the function body (println (str \"Hello, \" name)).",
    "value": "user=> (defn say-hello\n         [name]\n         (println (str \"Hello, \" name)))\n\nuser=> (say-hello \"Kim\")\nHello, Kim\nnil\n\n\nuser=> (defn say-hello\n         \"Takes name argument and say hello to the name\"\n         [name]\n         (println (str \"Hello, \" name)))"
  },
  {
    "id": "tour0rawr34734347431",
    "collection": ["Language Intros"],
    "title": "PHP",
    "filename": "test.php",
    "active": true,
    "tags": [
      "java", "class", "methods"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://julialang.org/learning/code-examples/",
    "language": "php",
    "description": "Sample for loop in PHP",
    "value": "function mandelbrot(a)\n    z = 0\n    for i=1:50\n        z = z^2 + a\n    end\n    return z\nend\n\nfor y=1.0:-0.05:-1.0\n    for x=-2.0:0.0315:0.5\n        abs(mandelbrot(complex(x, y))) < 2 ? print(\"*\") : print(\" \")\n    end\n    println()\nend"
  },
  {
    "id": "hw1253463734746",
    "collection": ["Language Intros", "Hello World"],
    "title": "Basic",
    "filename": "helloworld.bas",
    "active": true,
    "tags": [
      "basic", "hello world"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://julialang.org/learning/code-examples/",
    "language": "basic",
    "description": "It's me, Basic.",
    "value": "PRINT \"Hello, world!\"​\n"
  },
  {
    "id": "hw125468458458458",
    "collection": ["Language Intros", "Hello World"],
    "title": "C",
    "filename": "helloworld.c",
    "active": true,
    "tags": [
      "c", "hello world"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://julialang.org/learning/code-examples/",
    "language": "c",
    "description": "It's me, C.",
    "value": "#include \n \nint main(void)\n{\n    puts(\"Hello, world!\");\n}"
  },
  {
    "id": "hw125469458458458458",
    "collection": ["Language Intros", "Hello World"],
    "title": "C++",
    "filename": "helloworld.cpp",
    "active": true,
    "tags": [
      "c++", "cpp", "hello world"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://julialang.org/learning/code-examples/",
    "language": "cpp",
    "description": "It's me, C++.",
    "value": "#include \n \nint main()\n{\n    std::cout << \"Hello, world!\n\";\n    return 0;\n}"
  },
  {
    "id": "hw1254645848458",
    "collection": ["Language Intros", "Hello World"],
    "title": "C#",
    "filename": "helloworld.cs",
    "active": true,
    "tags": [
      "C#", "csharp", "hello world"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://julialang.org/learning/code-examples/",
    "language": "csharp",
    "description": "It's me, C#.",
    "value": "#include \nusing System;\nclass Program\n{\n    public static void Main(string[] args)\n    {\n        Console.WriteLine(\"Hello, world!\");\n    }\n}"
  },
  {
    "id": "hw12546578458945",
    "collection": ["Language Intros", "Hello World"],
    "title": "Java",
    "filename": "helloworld.java",
    "active": true,
    "tags": [
      "java", "hello world"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://julialang.org/learning/code-examples/",
    "language": "java",
    "description": "It's me, Java.",
    "value": "import javax.swing.JFrame;  //Importing class JFrame\nimport javax.swing.JLabel;  //Importing class JLabel\npublic class HelloWorld {\n    public static void main(String[] args) {\n        JFrame frame = new JFrame();           //Creating frame\n        frame.setTitle(\"Hi!\");                 //Setting title frame\n        frame.add(new JLabel(\"Hello, world!\"));//Adding text to frame\n        frame.pack();                          //Setting size to smallest\n        frame.setLocationRelativeTo(null);     //Centering frame\n        frame.setVisible(true);                //Showing frame\n    }\n}"
  },
  {
    "id": "hw125525246546",
    "collection": ["Language Intros", "Hello World"],
    "title": "jQuery",
    "filename": "helloworld.js",
    "active": true,
    "tags": [
      "jquery", "javascript", "hello world"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://julialang.org/learning/code-examples/",
    "language": "javascript",
    "description": "It's me, jQuery.",
    "value": "$(\"body\").append(\"Hello world!\");"
  },
  {
    "id": "h13#$$$w12546",
    "collection": ["Language Intros", "Hello World"],
    "title": "JavaScript",
    "filename": "helloworld.js",
    "active": true,
    "tags": [
      "javascript", "ecmascript", "hello world"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://julialang.org/learning/code-examples/",
    "language": "javascript",
    "description": "It's me, JavaScript.",
    "value": "document.write('Hello, world!');"
  },
  {
    "id": "hw12546543658458",
    "collection": ["Language Intros", "Hello World"],
    "title": "Julia",
    "filename": "helloworld.jl",
    "active": true,
    "tags": [
      "julia",  "hello world"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://julialang.org/learning/code-examples/",
    "language": "julia",
    "description": "It's Julia.",
    "value": "println(\"Hello world!\")"
  },
  {
    "id": "hw1254645678765",
    "collection": ["Language Intros", "Hello World"],
    "title": "MatLab",
    "filename": "helloworld.matlab",
    "active": true,
    "tags": [
      "matlab", "hello world"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://julialang.org/learning/code-examples/",
    "language": "matlab",
    "description": "It's me, MatLab.",
    "value": "classdef hello\n    methods\n        function greet(this)\n            disp('Hello, World')\n        end\n    end\nend"
  },
  {
    "id": "hw12546agawg-9876",
    "collection": ["Language Intros", "Hello World"],
    "title": "Pascal",
    "filename": "helloworld.cp",
    "active": true,
    "tags": [
      "pascal", "hello world"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://julialang.org/learning/code-examples/",
    "language": "pascal",
    "description": "It's me, Pascal.",
    "value": "program HelloWorld;\nbegin\n  WriteLn('Hello, world!');\nend."
  },
  {
    "id": "hwgggga125gggsegs46",
    "collection": ["Language Intros", "Hello World"],
    "title": "Python",
    "filename": "helloworld.py",
    "active": true,
    "tags": [
      "python", "hello world"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://julialang.org/learning/code-examples/",
    "language": "python",
    "description": "It's me, Python.",
    "value": "print \"Hello, world!\""
  },
  {
    "id": "hw1sggg2sgesges546",
    "collection": ["Language Intros", "Hello World"],
    "title": "R",
    "filename": "helloworld.r",
    "active": true,
    "tags": [
      "r", "hello world"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://julialang.org/learning/code-examples/",
    "language": "r",
    "description": "It's me, R.",
    "value": "cat('Hello, world!\n')"
  },
  {
    "id": "hw12546awtTWTWt",
    "collection": ["Language Intros", "Hello World"],
    "title": "Ruby",
    "filename": "helloworld.rb",
    "active": true,
    "tags": [
      "ruby", "hello world"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://julialang.org/learning/code-examples/",
    "language": "ruby",
    "description": "It's me, Ruby",
    "value": "puts \"Hello, world!\""
  },
  {
    "id": "hw12awtWTT@T2546",
    "collection": ["Language Intros", "Hello World"],
    "title": "Swift",
    "filename": "helloworld.swift",
    "active": true,
    "tags": [
      "swift", "hello world"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://julialang.org/learning/code-examples/",
    "language": "swift",
    "description": "It's me, Swift.",
    "value": "println(\"Hello, world!\")"
  },
  {
    "id": "hw125WTTwtT46",
    "collection": ["Language Intros", "Hello World"],
    "title": "Visual Basic",
    "filename": "helloworld.vb",
    "active": true,
    "tags": [
      "visual basic", "net", "hello world"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://julialang.org/learning/code-examples/",
    "language": "visual-basic",
    "description": "It's me, Visual Basic.",
    "value": "Module Module1\n    Sub Main()\n        Console.WriteLine(\"Hello, world!\")\n    End Sub\nEnd Module"
  },
  {
    "id": "hw1254awAWTWTw6",
    "collection": ["Language Intros", "Hello World"],
    "title": "CoffeeScript",
    "filename": "helloworld.coffee",
    "active": true,
    "tags": [
      "coffeescript", "hello world"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://julialang.org/learning/code-examples/",
    "language": "coffeescript",
    "description": "It's me, CoffeeScript.",
    "value": "console.log 'Hello, world!'"
  },
  {
    "id": "hw1warRTt2546",
    "collection": ["Language Intros", "Hello World"],
    "title": "Clojure",
    "filename": "helloworld.clj",
    "active": true,
    "tags": [
      "clojure", "hello world"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://julialang.org/learning/code-examples/",
    "language": "clojure",
    "description": "It's me, Clojure (ClojureScript).",
    "value": "(println \"Hello world!\")"
  },
  {
    "id": "hw1254f7pf7dz4tt36",
    "collection": ["Language Intros", "Hello World"],
    "title": "Eiffel",
    "filename": "helloworld.e",
    "active": true,
    "tags": [
      "eiffel", "hello world"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://julialang.org/learning/code-examples/",
    "language": "eiffel",
    "description": "It's me, Eiffel.",
    "value": "class\n    HELLO_WORLD\ncreate\n    make\nfeature\n    make\n        do\n            print (\"Hello, world!%N\")\n        end\nend"
  },
  {
    "id": "hw125p8p7fp7f46",
    "collection": ["Language Intros", "Hello World"],
    "title": "Erlang",
    "filename": "helloworld.erl",
    "active": true,
    "tags": [
      "erlang", "hello world"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://julialang.org/learning/code-examples/",
    "language": "erlang",
    "description": "It's me, Erlang.",
    "value": " -module(hello).\n -export([hello_world/0]).\n\n hello_world() -> io:fwrite(\"hello, world\\n\")."
  },
  {
    "id": "hw12546pg8pyg",
    "collection": ["Language Intros", "Hello World"],
    "title": "Elixir",
    "filename": "helloworld.ex",
    "active": true,
    "tags": [
      "elixir", "hello world"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://julialang.org/learning/code-examples/",
    "language": "elixir",
    "description": "It's me, Elixir.",
    "value": "IO.puts \"Hello World!\""
  },
  {
    "id": "hw12546p8gp8pgp",
    "collection": ["Language Intros", "Hello World"],
    "title": "F#",
    "filename": "helloworld.fs",
    "active": true,
    "tags": [
      "f#", "fsharp", "hello world"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://julialang.org/learning/code-examples/",
    "language": "fsharp",
    "description": "It's me, F#.",
    "value": "open System\nConsole.WriteLine(\"Hello World!\")"
  },
  {
    "id": "hw12546p8gpg8p78",
    "collection": ["Language Intros", "Hello World"],
    "title": "Fortran",
    "filename": "helloworld.f90",
    "active": true,
    "tags": [
      "fortran", "hello world"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://julialang.org/learning/code-examples/",
    "language": "fortran",
    "description": "It's me, Fortran.",
    "value": "program helloworld\n     print *, \"Hello world!\"\nend program helloworld"
  },
  {
    "id": "hw12546py8pypg8p",
    "collection": ["Language Intros", "Hello World"],
    "title": "Go",
    "filename": "helloworld.go",
    "active": true,
    "tags": [
      "go", "hello world"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://julialang.org/learning/code-examples/",
    "language": "go",
    "description": "It's me, Go.",
    "value": "package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello, World\")\n}"
  },
  {
    "id": "hw12546]op]iho",
    "collection": ["Language Intros", "Hello World"],
    "title": "Groovy",
    "filename": "helloworld.groovy",
    "active": true,
    "tags": [
      "groovy", "ruby", "hello world"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://julialang.org/learning/code-examples/",
    "language": "groovy",
    "description": "It's me, Groovy (Ruby).",
    "value": "println \"Hello World\""
  },
  {
    "id": "hw12546iri54sip[]]",
    "collection": ["Language Intros", "Hello World"],
    "title": "Haskell",
    "filename": "helloworld.hs",
    "active": true,
    "tags": [
      "haskell", "hello world"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://julialang.org/learning/code-examples/",
    "language": "haskell",
    "description": "It's me, Haskell",
    "value": "module Main where\n\nmain :: IO ()\nmain = putStrLn \"Hello, World!\""
  },
  {
    "id": "hw12546iylyi6rid",
    "collection": ["Language Intros", "Hello World"],
    "title": "RPG",
    "filename": "helloworld.ivg",
    "active": true,
    "tags": [
      "rpg", "ibm", "hello world"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://julialang.org/learning/code-examples/",
    "language": "textfile",
    "description": "It's me, IBM RPG.",
    "value": "dcl-s wait char(1);\n\ndsply ( 'Hello World!') ' ' wait;\n\n*inlr = *on;"
  },
  {
    "id": "hw12546';l0i",
    "collection": ["Language Intros", "Hello World"],
    "title": "Logo",
    "filename": "helloworld.lgo",
    "active": true,
    "tags": [
      "logo", "hello world"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://julialang.org/learning/code-examples/",
    "language": "textfile",
    "description": "It's me, Logo.",
    "value": "TO HELLO\n        PRINT [Hello world]\n        END"
  },
  {
    "id": "hw1251251?46",
    "collection": ["Language Intros", "Hello World"],
    "title": "Machine Code",
    "filename": "helloworld.obj",
    "active": true,
    "tags": [
      "machine", "hello world"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://julialang.org/learning/code-examples/",
    "language": "textfile",
    "description": "It's me, Machine Code.",
    "value": "b8    21 0a 00 00   #moving \"!\\n\" into eax\na3    0c 10 00 06   #moving eax into first memory location\nb8    6f 72 6c 64   #moving \"orld\" into eax\na3    08 10 00 06   #moving eax into next memory location\nb8    6f 2c 20 57   #moving \"o, W\" into eax\na3    04 10 00 06   #moving eax into next memory location\nb8    48 65 6c 6c   #moving \"Hell\" into eax\na3    00 10 00 06   #moving eax into next memory location\nb9    00 10 00 06   #moving pointer to start of memory location into ecx\nba    10 00 00 00   #moving string size into edx\nbb    01 00 00 00   #moving \"stdout\" number to ebx\nb8    04 00 00 00   #moving \"print out\" syscall number to eax\ncd    80            #calling the linux kernel to execute our print to stdout\nb8    01 00 00 00   #moving \"sys_exit\" call number to eax\ncd    80            #executing it via linux sys_call"
  },
  {
    "id": "!$!$!$hw12546",
    "collection": ["Language Intros", "Hello World"],
    "title": "Objective-C",
    "filename": "helloworld.m",
    "active": true,
    "tags": [
      "objectivec", "hello world"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://julialang.org/learning/code-examples/",
    "language": "objectivec",
    "description": "It's me, Objective-C.",
    "value": "main()\n{\n  puts(\"Hello World!\");\n  return 0;\n}"
  },
  {
    "id": "h14$!w12546",
    "collection": ["Language Intros", "Hello World"],
    "title": "PowerShell",
    "filename": "helloworld.ps1",
    "active": true,
    "tags": [
      "powershell", "hello world"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://julialang.org/learning/code-examples/",
    "language": "powershell",
    "description": "It's me, PowerShell.",
    "value": "Write-Host \"Hello, World!\""
  },
  {
    "id": "hw125%!$46",
    "collection": ["Language Intros", "Hello World"],
    "title": "Rust",
    "filename": "helloworld.rs",
    "active": true,
    "tags": [
      "rust", "hello world"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://julialang.org/learning/code-examples/",
    "language": "rust",
    "description": "It's me, Rust.",
    "value": "fn main() {\n    println!(\"Hello, world!\");\n}"
  },
  {
    "id": "hw1!$@#%2546",
    "collection": ["Language Intros", "Hello World"],
    "title": "Scala",
    "filename": "helloworld.scala",
    "active": true,
    "tags": [
      "scala", "hello world"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://julialang.org/learning/code-examples/",
    "language": "scala",
    "description": "It's me, Scala.",
    "value": "object HelloWorld extends App {\n   println(\"Hello, World!\")\n }"
  },
  {
    "id": "hw125462366",
    "collection": ["Language Intros", "Hello World"],
    "title": "Scheme",
    "filename": "helloworld.scm",
    "active": true,
    "tags": [
      "scheme", "hello world"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://julialang.org/learning/code-examples/",
    "language": "scheme",
    "description": "It's me, Scheme.",
    "value": "(let ((hello0 (lambda() (display \"Hello world\") (newline))))\n  (hello0))"
  },
  {
    "id": "hw1-09872546",
    "collection": ["Language Intros", "Hello World"],
    "title": "Scratch",
    "filename": "helloworld.js",
    "active": true,
    "tags": [
      "scratch", "hello world"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://julialang.org/learning/code-examples/",
    "language": "javascript",
    "description": "It's me, Scratch.",
    "value": "say Hello, World!"
  },
  {
    "id": "hw1jrs2546",
    "collection": ["Language Intros", "Hello World"],
    "title": "Tcl",
    "filename": "helloworld.tcl",
    "active": true,
    "tags": [
      "tcl", "hello world"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://julialang.org/learning/code-examples/",
    "language": "tcl",
    "description": "It's me, Tcl.",
    "value": "puts \"Hello World!\""
  },
  {
    "id": "hw13472362546",
    "collection": ["Language Intros", "Hello World"],
    "title": "AppleScript",
    "filename": "helloworld.applescript",
    "active": true,
    "tags": [
      "applescript", "hello world"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://julialang.org/learning/code-examples/",
    "language": "applescript",
    "description": "It's me, AppleScript.",
    "value": "say \"Hello, world!\""
  },
  {
    "id": "hw17532546",
    "collection": ["Language Intros", "Hello World"],
    "title": "Assembly",
    "filename": "helloworld.asm",
    "active": true,
    "tags": [
      "asm6502", "assembly", "hello world"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://julialang.org/learning/code-examples/",
    "language": "asm6502",
    "description": "It's me, Assembly Language.",
    "value": "    global  _main\n    extern  _printf\n\n    section .text\n_main:\n    push    message\n    call    _printf\n    add     esp, 4\n    ret\nmessage:\n    db  'Hello, World', 10, 0"
  },
  {
    "id": "hw125432666626fafsaasf",
    "collection": ["Language Intros", "Hello World"],
    "title": "OCaml",
    "filename": "helloworld.ml",
    "active": true,
    "tags": [
      "ocaml", "hello world"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://excelwithbusiness.com/blog/say-hello-world-in-28-different-programming-languages/",
    "language": "ocaml",
    "description": "It's me, OCaml.",
    "value": "print_endline \"Hello, world!\";;"
  },
  {
    "id": "hw1254d453afa6",
    "collection": ["Language Intros", "Hello World"],
    "title": "Smalltalk",
    "filename": "helloworld.st",
    "active": true,
    "tags": [
      "smalltalk", "hello world"
    ],
    "addedBy": "joem",
    "likedBy": [
      "chris", "kate", "noah"
    ],
    "private": false,
    "addedOn": "2021-04-23T18:25:43.511Z",
    "updatedOn": "2021-04-23T18:25:43.511Z",
    "source": "https://en.wikipedia.org/wiki/GNU_Smalltalk",
    "language": "smalltalk",
    "description": "It's me, Smalltalk.",
    "value": "Transcript show: 'Hello World!'."
  }

]


